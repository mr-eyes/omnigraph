"""
This script is used under the project "Universal Transcriptome"

Input: Output directory generated by invoking query_2 executable
Output: TSV with final components {col1: finalCompID, col2: list_of_original_components}

A. Column(1): final Component ID
B. Column(3:): list of original components

Run:
python construct_finalComponents.py <out_dir>
"""

import sys
import os
import glob
from configparser import ConfigParser
from typing import TextIO

from tqdm import tqdm


def read_kp_config(filename='config.ini', section='kProcessor'):
    parser = ConfigParser()
    parser.read(filename)
    params = {}

    if parser.has_section(section):
        items = parser.items(section)
        for item in items:
            params[item[0]] = item[1]
    else:
        raise Exception('{0} not found in the {1} file'.format(section, filename))

    return params


abs_path = os.path.dirname(os.path.abspath(__file__))

params = read_kp_config(filename=os.path.join(abs_path, '..', "config.ini"), section="output_fasta")
fasta_dir = params["fasta_dir"]
counts_dir = os.path.join(fasta_dir, "counts")

counts_files = dict()
for _file in glob.glob(counts_dir + "/*count.tsv"):
    collectiveCompID = int(os.path.basename(_file).split("_")[0])
    counts_files[collectiveCompID] = _file

_path_originalComps_pairwise = os.path.join(fasta_dir, "originalComps_pairwise.tsv")
_path_finalComponents = os.path.join(fasta_dir, "final_components.tsv")

with open(_path_originalComps_pairwise, 'w') as origCompsPairwise_writer, open(_path_finalComponents, 'w') as finalComps_writer:
    for collectiveCompID in tqdm(sorted(counts_files.keys())):
        counts_file_path = counts_files[collectiveCompID]
        result_buffer = dict()
        with open(counts_file_path, 'r') as countsReader:
            for line in countsReader:
                line = line.strip()
                R1_ID, originalComp_1_ID, R2_ID, originalComp_2_ID = tuple(line.split('\t'))
                key = tuple(sorted([int(originalComp_1_ID), int(originalComp_2_ID)]))
                if key in result_buffer:
                    result_buffer[key] += 1
                else:
                    result_buffer[key] = 1

            for pair, count in result_buffer.items():
                new_line = f"{pair[0]}\t{pair[1]}\t{count}\n"
                origCompsPairwise_writer.write(new_line)

            result_buffer.clear()
