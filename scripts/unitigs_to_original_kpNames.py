"""
This script is used under the project "Omnigraph"

Input:
    1- Fasta file of the cDBG unitigs
    2- collectiveComps.csv (Generated by the script unitigs_to_connected_components.py)

Output:
    1- Names TSV ready to be used by the kmersColoring executable

Run:
    - python unitigs_to_original_kpNames.py <unitigs_fasta> <connected_components>

Example:
    - python unitigs_to_original_kpNames.py unitigs.fa collective.csv

"""

import os
import shutil
import subprocess
import sys

from tqdm import tqdm

if len(sys.argv) < 3:
    sys.exit("run: python unitigs_to_original_kpNames.py <unitigs_fasta> <collectiveComps_csv>")

unitigs_fasta = sys.argv[1]
collectiveCompsCSV = sys.argv[2]

cmd = f"wc -l {collectiveCompsCSV}"
originalCompsNo = int(subprocess.getoutput(cmd).split()[0])
print(f"Number of original components: {originalCompsNo}")

namesFile_suffix = os.path.basename(unitigs_fasta) + ".names"

print("Mapping unitigs to original components ...")

unitigToOriginal = dict()
originalToCollective = dict()
unique_collective = set()

with open(collectiveCompsCSV, 'r') as csvReader:
    for line in tqdm(csvReader, total=originalCompsNo):
        line = line.strip().split(',')
        originalCompID = line[0]
        collectiveCompID = line[1]
        unique_collective.add(collectiveCompID)
        originalToCollective[originalCompID] = collectiveCompID

        for unitigID in line[2:]:
            unitigToOriginal[unitigID] = originalCompID

cmd = f"wc -l {unitigs_fasta}"
noSeqs = int(subprocess.getoutput(cmd).split()[0])

namesFiles_objects = dict()

export_path = "originalComponents"

if not os.path.exists(export_path):
    os.mkdir(export_path)
else:
    shutil.rmtree(export_path)
    os.mkdir(export_path)

for compID in unique_collective:
    namesFiles_objects[compID] = open(f"{export_path}/{int(compID):03d}_{namesFile_suffix}", 'w')


print("Generating the names files ...")
with open(unitigs_fasta, 'r') as fastaReader:
    for line in tqdm(fastaReader, total=noSeqs):
        if line[0] == '>':
            unitigID = line[1:].split()[0]
            originalCompID = unitigToOriginal[unitigID]
            collectiveCompID = originalToCollective[originalCompID]
            readName = line.replace('\n', '')[1:]
            namesFiles_objects[collectiveCompID].write(f"{readName}\t{originalCompID}\n")


for compID, fileObject in namesFiles_objects.items():
    fileObject.close()






